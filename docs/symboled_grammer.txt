Program -> #start_scope Declaration-list #end_scope $
Declaration-list -> Declaration Declaration-list
Declaration-list -> EPSILON
Declaration -> Declaration-initial Declaration-prime
Declaration-initial -> Type-specifier #push_lexeme ID
Declaration-prime -> Fun-declaration-prime
Declaration-prime -> Var-declaration-prime
Var-declaration-prime -> ; #set_var
Var-declaration-prime -> [ #pnum NUM ] ; #set_arr
Fun-declaration-prime -> #save_func_add #stop_symbol ( Params ) #label #get_temp #get_temp #start_return Compound-stmt #end_return #return_address #save_func_atts #func_backpatching
Type-specifier -> int
Type-specifier -> void
Params -> int #push_lexeme ID #set_var Param-prime Param-list
Params -> void
Param-list -> , Param #set_var Param-list
Param-list -> EPSILON
Param -> Declaration-initial Param-prime
Param-prime -> [ ]
Param-prime -> EPSILON
Compound-stmt -> { #start_scope Declaration-list Statement-list #end_scope }
Statement-list -> Statement Statement-list
Statement-list -> EPSILON
Statement -> Expression-stmt
Statement -> Compound-stmt
Statement -> Selection-stmt
Statement -> Iteration-stmt
Statement -> Return-stmt
Expression-stmt -> Expression ; #pop
Expression-stmt -> break ; #break_func
Expression-stmt -> ;
Selection-stmt -> if ( Expression ) #save Statement Else-stmt
Else-stmt -> endif #jpf
Else-stmt -> else #jpf_save Statement endif #jp
Iteration-stmt -> repeat #label #break_start Statement until ( Expression ) #until #break_end
Return-stmt -> return Return-stmt-prime #return_func
Return-stmt-prime -> #numeric_label ;
Return-stmt-prime -> Expression ;
Expression -> Simple-expression-zegond
Expression -> #pid ID B
B -> = Expression #assign
B -> [ Expression ] #access_array_index H
B -> Simple-expression-prime
H -> = Expression #assign
H -> G D C
Simple-expression-zegond -> Additive-expression-zegond C
Simple-expression-prime -> Additive-expression-prime C
C -> #push_lexeme Relop Additive-expression #operation
C -> EPSILON
Relop -> <
Relop -> ==
Additive-expression -> Term D
Additive-expression-prime -> Term-prime D
Additive-expression-zegond -> Term-zegond D
D -> #push_lexeme Addop Term #operation D
D -> EPSILON
Addop -> +
Addop -> -
Term -> Factor G
Term-prime -> Factor-prime G
Term-zegond -> Factor-zegond G
G -> * Factor #mult G
G -> EPSILON
Factor -> ( Expression )
Factor -> #pid ID Var-call-prime
Factor -> #pnum NUM
Var-call-prime -> ( Args #output ) #call_function
Var-call-prime -> Var-prime
Var-prime -> [ Expression ] #assign_array_index
Var-prime -> EPSILON
Factor-prime -> ( Args #output ) #call_function
Factor-prime -> EPSILON
Factor-zegond -> ( Expression )
Factor-zegond -> #pnum NUM
Args -> Arg-list
Args -> EPSILON
Arg-list -> Expression Arg-list-prime
Arg-list-prime -> , Expression Arg-list-prime
Arg-list-prime -> EPSILON